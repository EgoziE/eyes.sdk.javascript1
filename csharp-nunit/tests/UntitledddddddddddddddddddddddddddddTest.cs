// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Remote;
using NUnit.Framework;
using Applitools;
using Applitools.Selenium;
using Applitools.VisualGrid;
using System.Drawing;
using Configuration = Applitools.Selenium.Configuration;
using ScreenOrientation = Applitools.VisualGrid.ScreenOrientation;
[TestFixture]
public class UntitledddddddddddddddddddddddddddddTest {
  private IWebDriver driver;
  public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  Eyes eyes;
  string preRenderHook;
  VisualGridRunner runner;
  [SetUp]
  public void SetUp() {
    driver = new RemoteWebDriver(new Uri("http://selenium:4444/wd/hub"), new ChromeOptions().ToCapabilities());
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
    
    Configuration conf = new Configuration();
    conf.SetTestName("Untitleddddddddddddddddddddddddddddd");
    conf.SetAppName("kkkk");
    conf.SetViewportSize(new Size(1440, 998));
    conf.AccessibilityValidation = AccessibilityLevel.AA;
    conf.SetBaselineEnvName("asdfasdfjkjkjjasdfjasfjasdfj");
    conf.AddBrowser(2048, 1536, BrowserType.CHROME);
    conf.AddDeviceEmulation(DeviceName.iPhone_6_7_8_Plus, ScreenOrientation.Landscape);
    runner = new VisualGridRunner(10);
    eyes = new Eyes(runner);
    eyes.SetConfiguration(conf);
    eyes.Open(driver);
  }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
    TestResultsSummary allTestResults = runner.GetAllTestResults();
    System.Console.WriteLine(allTestResults);
  }
  [Test]
  public void untitleddddddddddddddddddddddddddddd() {
    driver.Navigate().GoToUrl("https://www.google.com/");
    preRenderHook = "console.log(\"blah\");";
    eyes.Check(Target.Window().Fully().BeforeRenderScreenshotHook(preRenderHook));
    eyes.Check(Target.Region(By.Name("q")).BeforeRenderScreenshotHook(preRenderHook));
  }
}
